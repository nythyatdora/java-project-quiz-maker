package project.quiz.maker;

import java.util.Iterator;
import java.util.LinkedList;

public class PanelAnswer extends javax.swing.JPanel {

    private final int MIN_ANSWERS = 2;
    private final int MAX_ANSWERS = 5;
    
    private final LinkedList<AnswerControl> answerControls;
    
    public PanelAnswer () {
        this.answerControls = new LinkedList<> ();
        initComponents ();
        defaultSetup ();
    }
    
    public void addAnswer() {
        if(answerControls.size () != MAX_ANSWERS) {
            answerControls.push  (new AnswerControl ());
            setOnPanel ();
        }
    }
    
    public void addAnswer(AnswerControl answerCS) {
        if(answerControls.size () != MAX_ANSWERS) {
            answerControls.push  (answerCS);
            setOnPanel ();
        }
    }
    
    public void addAnswer(String answerDetail, boolean isChosen) {
        if(answerControls.size () != MAX_ANSWERS) {
            answerControls.push (new AnswerControl (answerDetail, isChosen));
            setOnPanel ();
        }
    }
    
    public void removeAnswer() {
        if(answerControls.size () != MIN_ANSWERS) {
            answerControls.pop ();
            setOnPanel ();
        }
    }
    
    public void removeAllAnswers() {
        answerControls.removeAll (answerControls);
        setOnPanel ();
    }
    
    private void defaultSetup() {
        answerControls.push (new AnswerControl());
        answerControls.push (new AnswerControl());
        setOnPanel ();
    }
    
    private void setOnPanel() {
        panel_answers.removeAll ();
            
                
        for ( int i = answerControls.size () - 1 ; i >= 0  ; i-- ) {
            AnswerControl get = answerControls.get (i);
            panel_answers.add (get);
            panel_answers.revalidate ();
            panel_answers.repaint ();  
        }
        
        scroll_answers.repaint ();
    }
    
    public boolean hasAllFilled() {
        boolean isFilled = true;
        
        for ( AnswerControl answerControl : answerControls ) {
            if ( VerifyVariable.isEmptyOrDefault (answerControl.getAnswerDescription ()) ) {
                isFilled = false;
                return isFilled;
            }
        }
        
        return isFilled;
    }
    
    public boolean hasChosenAnswer() {
        boolean hasChosen = false;
        
        for ( AnswerControl answerControl : answerControls ) {
            boolean currentState = answerControl.isChosenAnswer ();
            
            if(currentState)
                hasChosen = hasChosen || currentState;
        }
        return hasChosen;
    }
    
    public boolean hasMultipleChosenAnswers() {
        int countAnswer = 0;
        
        for ( AnswerControl answerControl : answerControls ) {
            if(answerControl.isChosenAnswer ())
                countAnswer++;
        }
        
        return countAnswer > 1; 
    }
    
    public LinkedList<Answer> getAllAnswers() {
        LinkedList<Answer> list = new LinkedList<> ();
        
        int i = 0;
        for ( Iterator<AnswerControl> it = answerControls.iterator () ; it.hasNext () ; ) {
            AnswerControl answer = it.next ();
            list.addLast (answer.getAnswer (++i));
        }
        
        return list;
    }
    
    public String getAllChosenNO() {
        LinkedList<Integer> list = new LinkedList<> ();
        LinkedList<Answer> answers = getAllAnswers ();
        
        for ( Iterator<Answer> iterator = answers.iterator () ; iterator.hasNext () ; ) {
            Answer next = iterator.next ();
            if(next.getIsChosen ())
                list.add (next.getAnswerNO ());
        }
        
        return list.toString ();
    }

    public void resetDefault() {
        answerControls.removeAll (answerControls);
        defaultSetup ();
    }
    
    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scroll_answers = new javax.swing.JScrollPane();
        panel_answers = new javax.swing.JPanel();

        scroll_answers.setBorder(null);

        panel_answers.setBackground(new java.awt.Color(255, 255, 255));
        panel_answers.setLayout(new javax.swing.BoxLayout(panel_answers, javax.swing.BoxLayout.Y_AXIS));
        scroll_answers.setViewportView(panel_answers);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scroll_answers, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scroll_answers, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel panel_answers;
    private javax.swing.JScrollPane scroll_answers;
    // End of variables declaration//GEN-END:variables
}
